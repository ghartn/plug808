{"version":3,"sources":["samples/plug808.mp3","layouts/DefaultLayout.js","pages/HomePage.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","DefaultLayout","Component","component","path","rest","render","matchProps","className","C3","MAX_FREQ","HomePage","props","_plug808","e","sampler","state","isLoaded","releaseAll","window","innerHeight","innerWidth","nativeEvent","offsetX","offsetY","console","log","widthPercent","frequency","distortion","connect","triggerAttack","Sampler","plug808","onload","setState","toMaster","Distortion","onClick","this","App","basename","process","exact","Boolean","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sFAAAA,EAAOC,QAAU,IAA0B,qC,mKCiB5BC,EAdO,SAAC,GAA6C,IAAhCC,EAA+B,EAA1CC,UAAsBC,EAAoB,EAApBA,KAASC,EAAW,oCAClE,OACC,kBAAC,IAAD,iBACKA,EADL,CAECD,KAAMA,EACNE,OAAQ,SAAAC,GAAU,OACjB,yBAAKC,UAAU,8CACd,kBAACN,EAAcK,S,iECNdE,EAAK,OACLC,EAAW,OAEIC,E,YACpB,WAAYC,GAAQ,IAAD,8BAClB,4CAAMA,KAePC,SAAW,SAAAC,GACV,GAAK,EAAKC,SAAY,EAAKC,MAAMC,SAAjC,CAGA,EAAKF,QAAQG,aAJE,MAKmBC,OAA5BC,EALS,EAKTA,YAAaC,EALJ,EAKIA,WALJ,EAMYP,EAAEQ,YAAvBC,EANS,EAMTA,QAASC,EANA,EAMAA,QACfC,QAAQC,IAAR,kBAAuBL,EAAvB,cAAuCD,IACvCK,QAAQC,IAAR,iBAAsBH,EAAtB,cAAmCC,IACnC,IACIG,EAAeJ,EAAUF,EACzBO,GAFgB,EAAMJ,EAAUJ,IAEHV,EAAWD,GAAMA,EAC9C,EAAKoB,aACR,EAAKA,WAAWA,WAAaF,EAC7B,EAAKZ,QAAQe,QAAQ,EAAKD,aAE3B,EAAKd,QAAQgB,cAAcH,KA9B3B,EAAKZ,MAAQ,CAAEC,UAAU,GAEzB,EAAKF,QAAU,IAAIiB,UAClB,CAAEvB,GAAIwB,KACN,CACCC,OAAQ,WACP,EAAKC,SAAS,CAAElB,UAAU,OAG3BmB,WAEF,EAAKP,WAAa,IAAIQ,aAAW,GAAGD,WAblB,E,sEAoClB,OACC,yBACC5B,UAAU,4DACV8B,QAASC,KAAK1B,UAEd,wBAAIL,UAAU,0CAAd,gB,GA1CkCN,aCavBsC,MAXf,WACC,OACC,kBAAC,IAAD,CAAQC,SAAUC,IACjB,kBAAC,IAAD,KACC,kBAAC,EAAD,CAAetC,KAAK,IAAIuC,OAAK,EAACxC,UAAWQ,IACzC,kBAAC,EAAD,CAAeR,UAAWQ,OCFViC,QACW,cAA7BzB,OAAO0B,SAASC,UAEe,UAA7B3B,OAAO0B,SAASC,UAEhB3B,OAAO0B,SAASC,SAASC,MACvB,2DCZNC,IAAS1C,OAAO,kBAAC,EAAD,MAAS2C,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.68cf7ef0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/plug808.e1eda531.mp3\";","import React from \"react\";\r\nimport { Route } from \"react-router-dom\";\r\n\r\nconst DefaultLayout = ({ component: Component, path, ...rest }) => {\r\n\treturn (\r\n\t\t<Route\r\n\t\t\t{...rest}\r\n\t\t\tpath={path}\r\n\t\t\trender={matchProps => (\r\n\t\t\t\t<div className=\"flex flex-col min-h-screen leading-normal \">\r\n\t\t\t\t\t<Component {...matchProps} />\r\n\t\t\t\t</div>\r\n\t\t\t)}\r\n\t\t/>\r\n\t);\r\n};\r\n\r\nexport default DefaultLayout;\r\n","import React, { Component } from \"react\";\r\nimport { Sampler, Distortion } from \"tone\";\r\nimport plug808 from \"../samples/plug808.mp3\";\r\n\r\nconst C3 = 130.81;\r\nconst MAX_FREQ = 523.35;\r\n\r\nexport default class HomePage extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = { isLoaded: false };\r\n\r\n\t\tthis.sampler = new Sampler(\r\n\t\t\t{ C3: plug808 },\r\n\t\t\t{\r\n\t\t\t\tonload: () => {\r\n\t\t\t\t\tthis.setState({ isLoaded: true });\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t).toMaster();\r\n\r\n\t\tthis.distortion = new Distortion(0).toMaster();\r\n\t}\r\n\r\n\t_plug808 = e => {\r\n\t\tif (!this.sampler || !this.state.isLoaded) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tthis.sampler.releaseAll();\r\n\t\tlet { innerHeight, innerWidth } = window;\r\n\t\tlet { offsetX, offsetY } = e.nativeEvent;\r\n\t\tconsole.log(`window: ${innerWidth} x ${innerHeight}`);\r\n\t\tconsole.log(`click: ${offsetX} x ${offsetY}`);\r\n\t\tlet heightPercent = 1.0 - offsetY / innerHeight;\r\n\t\tlet widthPercent = offsetX / innerWidth;\r\n\t\tlet frequency = heightPercent * (MAX_FREQ - C3) + C3;\r\n\t\tif (this.distortion) {\r\n\t\t\tthis.distortion.distortion = widthPercent;\r\n\t\t\tthis.sampler.connect(this.distortion);\r\n\t\t}\r\n\t\tthis.sampler.triggerAttack(frequency);\r\n\t};\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div\r\n\t\t\t\tclassName=\"flex flex-1 min-h-full w-full justify-center items-center\"\r\n\t\t\t\tonClick={this._plug808}\r\n\t\t\t>\r\n\t\t\t\t<h1 className=\"pointer-events-none font-bold text-2xl\">plug808</h1>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n","import React from \"react\";\nimport { BrowserRouter as Router, Switch } from \"react-router-dom\";\n\n//Layouts\nimport DefaultLayout from \"./layouts/DefaultLayout\";\n\n//Page Imports\nimport HomePage from \"./pages/HomePage\";\n\nfunction App() {\n\treturn (\n\t\t<Router basename={process.env.PUBLIC_URL}>\n\t\t\t<Switch>\n\t\t\t\t<DefaultLayout path=\"/\" exact component={HomePage} />\n\t\t\t\t<DefaultLayout component={HomePage} />\n\t\t\t</Switch>\n\t\t</Router>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}